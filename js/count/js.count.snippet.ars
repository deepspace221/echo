[#CONTINUE#]
&\count {params}={init}
#js >>
use temp;
import "https://raw.githubusercontent.com/deepspace221/echo/master/functions/count.echo.functions.js";
import "https://raw.githubusercontent.com/deepspace221/echo/master/functions/roles.functions.js"; 
import "https://raw.githubusercontent.com/deepspace221/echo/master/functions/api_functions.js";
import "https://raw.githubusercontent.com/deepspace221/echo/master/functions/messages/embeds/count_embed_functions.js";
import "https://raw.githubusercontent.com/deepspace221/echo/master/functions/embeds.functions.js";
import "https://raw.githubusercontent.com/deepspace221/echo/master/functions/general_purpose_functions.js";
import "https://raw.githubusercontent.com/deepspace221/echo/master/functions/debug.functions.js";

var topRole = getRolePosition("n. Afrikaans");
var bottomRole = getRolePosition("Yiddish");
var staff = getStaffRoleName();
var roleName = isRole(Params);
      
if (ChannelID == 349824543424118784 || MemberHasRole(Server.ID, UserID, staff)){
          if (Params == "") {
                description = "{user} You didn't specify any input.";
          }
          else if (/(lang|top)/i.test(Params)){
                var link = "{ars:P-sortCount}";

                var arrStudyLangs = getArrStudyLangs(bottomRole, topRole);
                var indexLangOBJ = findFirstIndexFluentAndNativeOBJ(arrStudyLangs);  
                var langsOBJ = getLangsInfoOBJ(arrStudyLangs, indexLangOBJ.fluentIndex, indexLangOBJ.nativeIndex);
             
                langsOBJ["type"] = (Params.match(/(native|fluent|learning|top)/i) != null) ? Params.match(/(native|fluent|learning|top)/i)[0] : "";
                langsOBJ["limit"] = (Params.match(/\d\d?/) != null) ? Params.match(/\d\d?/) : 0;
                // langsOBJ["top"] = (Params.match(/top/i) != null) ? true : false;
               
                resp = link + "{m?temp:langsOBJ} := " + JSON.stringify(langsOBJ);
          }
          else if (roleName == undefined) {
                          description = "{user} You didn't specify a vaild role name. Please try again.";
                          resp = getBasicEmbed(description);
          } 
          else if (isLanguageRole(roleName)){
                              var langCounters = getLangCounterOBJ(roleName);
                              var countersStr = langCounters.nativeCount + "      /      " + langCounters.fluentCount + "      /      " + langCounters.learningCount;
                              var countersTotal = langCounters.total;
                              var langMeta = getLangMetaData(roleName);
                              resp = getEmbedSingleLangCount(roleName, countersStr, 
                                        countersTotal, langMeta.thumb, langMeta.nativeName, 
                                        langMeta.wiki, langMeta.locations);       
          }
          else{
                              roleCount = countRoleMembers(roleName);
                              resp = getEmbedSingleRoleCount(roleName, roleCount);       
          }
}
>> 

[#CONTINUE#]
P-sortCount={init}
{ars:P-sortCount2}

[#CONTINUE#]
P-sortCount2={init}
#js >>
use temp;
import "https://raw.githubusercontent.com/deepspace221/echo/master/functions/count.echo.functions.js";
import "https://raw.githubusercontent.com/deepspace221/echo/master/functions/messages/embeds/count_embed_functions.js";
import "https://raw.githubusercontent.com/deepspace221/echo/master/functions/embeds.functions.js";
import "https://raw.githubusercontent.com/deepspace221/echo/master/functions/general_purpose_functions.js";
import "https://raw.githubusercontent.com/deepspace221/echo/master/functions/debug.functions.js";

var langsOBJ = JSON.parse(temp["langsOBJ"]);
var type = langsOBJ.type; 
var limit = langsOBJ.limit;
sortByCountOBJ(langsOBJ);
output = getOutput(langsOBJ, limit);
var userLimit = (output.limit == true) ? " Displaying results for top **" + limit + "** items.": "";

if (type == ""){
      resp = getCountLangEmbed(output, userLimit, langsOBJ);
}
else if (type == "native" || type == "fluent" || type == "learning") {  
       resp = getCountTypeEmbed(output, type, userLimit, langsOBJ);                   
}  
else if (type == "top") {
       resp =  getCountTopEmbed(output, userLimit);                
}   

function sortByCountOBJ(langsOBJ){
      var arr = ["native", "fluent", "learning"];

      for (i = 0; i < arr.length; i++){
          langsOBJ[arr[i] + "Field"].sort(function(a, b) {
                        return a.count - b.count;
          });
      }
}

function getOutput(langsOBJ, limit){
         var outputOBJ = {
                nativeField: "",
                nativeNames: "",
                nativeNum: "",
                nativeRolesCount: "",

                fluentField: "",
                fluentNames: "",
                fluentNum: "",
                fluentRolesCount: "",

                learningField: "",
                learningNames: "",
                learningNum: "",
                learningRolesCount: "",
            };

        outputOBJ.nativeRolesCount = langsOBJ.nativeRolesCount;
        outputOBJ.fluentRolesCount = langsOBJ.fluentRolesCount;
        outputOBJ.learningRolesCount = langsOBJ.learningRolesCount;

        if (type == ''){
            outputOBJ = produceTypeOutput(outputOBJ, langsOBJ, "native", limit);
            outputOBJ = produceTypeOutput(outputOBJ, langsOBJ, "fluent", limit);
            outputOBJ = produceTypeOutput(outputOBJ, langsOBJ, "learning", limit);
        } 
        else if (type == "native" || type == "fluent" || type == "learning") 
          outputOBJ =produceTypeOutput(outputOBJ, langsOBJ, type, limit);
        else if (type == "top") 
          outputOBJ = produceTop(outputOBJ, langsOBJ, limit);

        return outputOBJ;
}     
>>

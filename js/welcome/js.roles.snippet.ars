[#CONTINUE#]
&\give {params}={init}
#js >>
use server_db;

// import "https://github.com/deepspace221/echo/edit/master/functions/general_purpose_functions.js";

// var polyglot = "false";

// var roles = {
//     userid: UserID,
//     give: [],
//     take: [],
//     errMsg: [],
// };

// var output = {
//     give: "",
//     giveMsg: "",
//     take: "",
//     takeMsg: "",
//     errMsg: ""
// };

var seniorModsPermissions = {
	Admins: 335021703140737034,
	Bot Dev: 403799057472028672, 
	Senior Mods: 371606096189587458, 
	Mods: 337640237931036682 
}
var activityRoles = {
	voiceMedia: 346415797544943626,
	lvl5: 349227376489660426,
	lvl15: 349227583570837514,
	lvl30: 349227712868515840,
	lvl50: 406879215854682132
}

var arrRestrictedRoles = getRestrictedRoles();
var arrParams = Params.toLowerCase().split(", ");
var paramsRegExp = "";
var arrSortedUserRoles = sortRolesByPosition();

for (i = 0; i < arrParams.length; i++){
		var paramsRegExp = new RegExp(arrParams[i].replace(/\./i, "\\."), 'i');
		serverRole = isUnique(arrParams[i], paramsRegExp);
		 if (serverRole != undefined && !isRoleRestricted(serverRole, arrRestrictedRoles)) {
				if (!MemberHasRole(Server.ID, UserID, serverRole))
					 	roles.give.push(serverRole);
				else
					 	roles.take.push(serverRole);		 		
		 }
}

debug(JSON.stringify(roles));

resp = "done";

function isUnique(params, paramsRegExp){
	var arr = [];

	for (k = 0; k < ServerRoles.length; k++){
		if (paramsRegExp.test(ServerRoles[k]["Name"])) {
			arr.push(ServerRoles[k]["Name"]);
		}
	}

	if (arr.length > 4){
		roles.errMsg = "\nRole `" + params + "` isn't unique enough. Too many results. Quitting.";
	}
	else if (arr.length == 4 || arr.length == 3 || arr.length == 2){
		var min = Math.min.apply(Math, arr.map(function(str) { return str.length; }));
		for (i = 0; i < arr.length; i++){
			if (arr[i].length == min)
				return arr[i];
		}
	}else if (arr.length == 1){
		return arr[0];
	}
}

function isRoleRestricted(role, arrRestrictedRoles) {
	//For staff.
	if (MemberHasRole(335021599059345408, UserID, getStaffRoleName()){
		if (isRoleHigherThanUserTopRole()){
			roles.errMsg.push("{user} Staff, this role is above your level of permissions.");
			return true;
		}
		else {
			for (key in activityRoles)
				if (role = activityRoles[key]){
					roles.errMsg.push("{user } This role is an activity role and it's only handled automatically by Mee6.");
					return true;
				}
		}
		return false
	}
	//check to see if user try to assign a role equale or above staff.
	var staffRolePosition = getStaffRoleName();
	var position = getRolePosition();

	if (position >= staffRolePosition){
		roles.errMsg("{user} You're not staff. What are you tring to do?");
		return true;
	}

	//final check. check against an array of restricted roles.
 	for (i=0; i < arrRestrictedRoles.length; i++){
		if (role == arrRestrictedRoles[i]){
			roles.errMsg = "\nThis role `" + role +"` is restricted. You don't have sufficent permission";
			return true;
		}
	}					
	return false;
}

function isRoleHigherThanUserTopRole(roleName, arrSortedUserRoles){
	var position = getRolePosition(roleName)
	if (position <= arrSortedUserRoles[0])
		return false;
	else
		return true;


}
>>


[#CONTINUE#]
&{:}(?i)iam (Lakota|.+ASL|Ancient Greek|f. Swahili|f. Persian|Klingon|Vlayrian|.+estonian) {params}={init}
ContentRegex.(?i)(lakota)?:{role:Other Languages}{user} You now have **Other Languages** role. You can access #lakota here.
ContentRegex.(?i)(Ancient Greek)?:{role:Other Languages}{user} You now have **Other Languages** role. You can access #ancient-greek here.
ContentRegex.(?i)(f. Persian)?:{role:Persian}{user} You now have **Persian** role.
ContentRegex.(?i)(Klingon)?:{role:Conlang}{user}  You now have **Conlang** role. You can acces #klingon here.
ContentRegex.(?i)(Vlayrian)?:{role:Conlang}{user} You now have **Conlang** role. You can acces #high-valyrian here.
ContentRegex.(?i)(f. Swahili)?:{role:Swahili}{user} You now have **Swahili** role. 
ContentRegex.(?i)((n\.|f\.) ASL)?:{role:ASL}{user} You now have **ALS** role.
ContentRegex.(?i)(estonian)?:{role:Other Languages}{user} You now have **Other Languages** role. You can access #estonian here.
[#CONTINUE#]
&{:}(?i)^\.iam (n\.\s|f\.\s)?(Arabic|Bulgarian|Cantonese|Czech|Danish|Dutch|English|Finnish|Flemish|French|Greek|German|Hebrew|Hindi|Hungarian|Indonesian|Italian|Japanese|Korean|Mandarin|Norwegian|Persian|Polish|Portuguese|Romanian|Russian|Spanish|Swahili|Swedish|Telugu|Turkish|Ukrainian|Vietnamese|Other)$={init}
ContentRegex.(n\.)?:{sleep:1s}{ars:sortmembers}{role:Basic}{take:Unassigned}
ContentRegex.(.)?:{take:New}
Response.nil?:{stop}

ErrNoNativeLang={init}
{arslock}
No such language exists in the database and the removing of a native language has been disabled. 
If you need help you can send a message to the staff with `\request YOUR_MESSAGE`
[#CONTINUE#]
ErrRemoveNativeLang={init}
{arslock}
**The last command has not been executed.** Removing of a native language has been disabled. 
Please a contact a staff member to remove a native language role.
You can send a request with the command `\request YOUR_MESSAGE`
(Bulgarian|Czech|Danish|Dutch|Finnish|Flemish|Greek|Hungarian|Norwegian|Polish|Romanian|Swedish|Ukrainian))?:{ars:removenew}{role:European}{take:World}
ParamRegex.(?i)((Arabic|Cantonese|Hebrew|Indonesian|Korean|Telugu|Turkish|Vietnamese|Other)
